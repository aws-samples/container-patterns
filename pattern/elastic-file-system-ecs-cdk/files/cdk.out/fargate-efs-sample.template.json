{
 "Resources": {
  "Vpc8378EB38": {
   "Type": "AWS::EC2::VPC",
   "Properties": {
    "CidrBlock": "10.0.0.0/16",
    "EnableDnsHostnames": true,
    "EnableDnsSupport": true,
    "InstanceTenancy": "default",
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/Resource"
   }
  },
  "VpcPublicSubnet1Subnet5C2D37C4": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.0.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc/PublicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PublicSubnet1/Subnet"
   }
  },
  "VpcPublicSubnet1RouteTable6C95E38E": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc/PublicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PublicSubnet1/RouteTable"
   }
  },
  "VpcPublicSubnet1RouteTableAssociation97140677": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PublicSubnet1/RouteTableAssociation"
   }
  },
  "VpcPublicSubnet1DefaultRoute3DA9E72A": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPublicSubnet1RouteTable6C95E38E"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "VpcIGWD7BA715C"
    }
   },
   "DependsOn": [
    "VpcVPCGWBF912B6E"
   ],
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PublicSubnet1/DefaultRoute"
   }
  },
  "VpcPublicSubnet1EIPD7E02669": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc/PublicSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PublicSubnet1/EIP"
   }
  },
  "VpcPublicSubnet1NATGateway4D7517AA": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "SubnetId": {
     "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
    },
    "AllocationId": {
     "Fn::GetAtt": [
      "VpcPublicSubnet1EIPD7E02669",
      "AllocationId"
     ]
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc/PublicSubnet1"
     }
    ]
   },
   "DependsOn": [
    "VpcPublicSubnet1DefaultRoute3DA9E72A",
    "VpcPublicSubnet1RouteTableAssociation97140677"
   ],
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PublicSubnet1/NATGateway"
   }
  },
  "VpcPublicSubnet2Subnet691E08A3": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.64.0/18",
    "MapPublicIpOnLaunch": true,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Public"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Public"
     },
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc/PublicSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PublicSubnet2/Subnet"
   }
  },
  "VpcPublicSubnet2RouteTable94F7E489": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc/PublicSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PublicSubnet2/RouteTable"
   }
  },
  "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPublicSubnet2RouteTable94F7E489"
    },
    "SubnetId": {
     "Ref": "VpcPublicSubnet2Subnet691E08A3"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PublicSubnet2/RouteTableAssociation"
   }
  },
  "VpcPublicSubnet2DefaultRoute97F91067": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPublicSubnet2RouteTable94F7E489"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "GatewayId": {
     "Ref": "VpcIGWD7BA715C"
    }
   },
   "DependsOn": [
    "VpcVPCGWBF912B6E"
   ],
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PublicSubnet2/DefaultRoute"
   }
  },
  "VpcPublicSubnet2EIP3C605A87": {
   "Type": "AWS::EC2::EIP",
   "Properties": {
    "Domain": "vpc",
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc/PublicSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PublicSubnet2/EIP"
   }
  },
  "VpcPublicSubnet2NATGateway9182C01D": {
   "Type": "AWS::EC2::NatGateway",
   "Properties": {
    "SubnetId": {
     "Ref": "VpcPublicSubnet2Subnet691E08A3"
    },
    "AllocationId": {
     "Fn::GetAtt": [
      "VpcPublicSubnet2EIP3C605A87",
      "AllocationId"
     ]
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc/PublicSubnet2"
     }
    ]
   },
   "DependsOn": [
    "VpcPublicSubnet2DefaultRoute97F91067",
    "VpcPublicSubnet2RouteTableAssociationDD5762D8"
   ],
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PublicSubnet2/NATGateway"
   }
  },
  "VpcPrivateSubnet1Subnet536B997A": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      0,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.128.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc/PrivateSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PrivateSubnet1/Subnet"
   }
  },
  "VpcPrivateSubnet1RouteTableB2C5B500": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc/PrivateSubnet1"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PrivateSubnet1/RouteTable"
   }
  },
  "VpcPrivateSubnet1RouteTableAssociation70C59FA6": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
    },
    "SubnetId": {
     "Ref": "VpcPrivateSubnet1Subnet536B997A"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PrivateSubnet1/RouteTableAssociation"
   }
  },
  "VpcPrivateSubnet1DefaultRouteBE02A9ED": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPrivateSubnet1RouteTableB2C5B500"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "VpcPublicSubnet1NATGateway4D7517AA"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PrivateSubnet1/DefaultRoute"
   }
  },
  "VpcPrivateSubnet2Subnet3788AAA1": {
   "Type": "AWS::EC2::Subnet",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "AvailabilityZone": {
     "Fn::Select": [
      1,
      {
       "Fn::GetAZs": ""
      }
     ]
    },
    "CidrBlock": "10.0.192.0/18",
    "MapPublicIpOnLaunch": false,
    "Tags": [
     {
      "Key": "aws-cdk:subnet-name",
      "Value": "Private"
     },
     {
      "Key": "aws-cdk:subnet-type",
      "Value": "Private"
     },
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc/PrivateSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PrivateSubnet2/Subnet"
   }
  },
  "VpcPrivateSubnet2RouteTableA678073B": {
   "Type": "AWS::EC2::RouteTable",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc/PrivateSubnet2"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PrivateSubnet2/RouteTable"
   }
  },
  "VpcPrivateSubnet2RouteTableAssociationA89CAD56": {
   "Type": "AWS::EC2::SubnetRouteTableAssociation",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPrivateSubnet2RouteTableA678073B"
    },
    "SubnetId": {
     "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PrivateSubnet2/RouteTableAssociation"
   }
  },
  "VpcPrivateSubnet2DefaultRoute060D2087": {
   "Type": "AWS::EC2::Route",
   "Properties": {
    "RouteTableId": {
     "Ref": "VpcPrivateSubnet2RouteTableA678073B"
    },
    "DestinationCidrBlock": "0.0.0.0/0",
    "NatGatewayId": {
     "Ref": "VpcPublicSubnet2NATGateway9182C01D"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/PrivateSubnet2/DefaultRoute"
   }
  },
  "VpcIGWD7BA715C": {
   "Type": "AWS::EC2::InternetGateway",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Vpc"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/IGW"
   }
  },
  "VpcVPCGWBF912B6E": {
   "Type": "AWS::EC2::VPCGatewayAttachment",
   "Properties": {
    "VpcId": {
     "Ref": "Vpc8378EB38"
    },
    "InternetGatewayId": {
     "Ref": "VpcIGWD7BA715C"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Vpc/VPCGW"
   }
  },
  "EcsCluster97242B84": {
   "Type": "AWS::ECS::Cluster",
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupInstanceSecurityGroup912E1231": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/InstanceSecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/InstanceSecurityGroup/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupInstanceRole3C026863": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ec2.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/InstanceRole/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy04DC6C80": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ecs:DeregisterContainerInstance",
        "ecs:RegisterContainerInstance",
        "ecs:Submit*"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EcsCluster97242B84",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:Poll",
        "ecs:StartTelemetrySession"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "EcsCluster97242B84",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:DiscoverPollEndpoint",
        "ecr:GetAuthorizationToken",
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EcsClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy04DC6C80",
    "Roles": [
     {
      "Ref": "EcsClusterDefaultAutoScalingGroupInstanceRole3C026863"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/InstanceRole/DefaultPolicy/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupInstanceProfile2CE606B3": {
   "Type": "AWS::IAM::InstanceProfile",
   "Properties": {
    "Roles": [
     {
      "Ref": "EcsClusterDefaultAutoScalingGroupInstanceRole3C026863"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/InstanceProfile"
   }
  },
  "EcsClusterDefaultAutoScalingGroupLaunchConfigB7E376C1": {
   "Type": "AWS::AutoScaling::LaunchConfiguration",
   "Properties": {
    "ImageId": {
     "Ref": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
    },
    "InstanceType": "t2.micro",
    "IamInstanceProfile": {
     "Ref": "EcsClusterDefaultAutoScalingGroupInstanceProfile2CE606B3"
    },
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "EcsClusterDefaultAutoScalingGroupInstanceSecurityGroup912E1231",
       "GroupId"
      ]
     }
    ],
    "UserData": {
     "Fn::Base64": {
      "Fn::Join": [
       "",
       [
        "#!/bin/bash\necho ECS_CLUSTER=",
        {
         "Ref": "EcsCluster97242B84"
        },
        " >> /etc/ecs/ecs.config\nsudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP\nsudo service iptables save\necho ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config"
       ]
      ]
     }
    }
   },
   "DependsOn": [
    "EcsClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicy04DC6C80",
    "EcsClusterDefaultAutoScalingGroupInstanceRole3C026863"
   ],
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/LaunchConfig"
   }
  },
  "EcsClusterDefaultAutoScalingGroupASGC1A785DB": {
   "Type": "AWS::AutoScaling::AutoScalingGroup",
   "Properties": {
    "MaxSize": "1",
    "MinSize": "1",
    "LaunchConfigurationName": {
     "Ref": "EcsClusterDefaultAutoScalingGroupLaunchConfigB7E376C1"
    },
    "Tags": [
     {
      "Key": "Name",
      "PropagateAtLaunch": true,
      "Value": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup"
     }
    ],
    "VPCZoneIdentifier": [
     {
      "Ref": "VpcPrivateSubnet1Subnet536B997A"
     },
     {
      "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
     }
    ]
   },
   "UpdatePolicy": {
    "AutoScalingReplacingUpdate": {
     "WillReplace": true
    },
    "AutoScalingScheduledAction": {
     "IgnoreUnmodifiedGroupSizeProperties": true
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/ASG"
   }
  },
  "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA45BF396": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "ec2:DescribeInstances",
        "ec2:DescribeInstanceAttribute",
        "ec2:DescribeInstanceStatus",
        "ec2:DescribeHosts"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "autoscaling:CompleteLifecycleAction",
       "Effect": "Allow",
       "Resource": {
        "Fn::Join": [
         "",
         [
          "arn:",
          {
           "Ref": "AWS::Partition"
          },
          ":autoscaling:",
          {
           "Ref": "AWS::Region"
          },
          ":",
          {
           "Ref": "AWS::AccountId"
          },
          ":autoScalingGroup:*:autoScalingGroupName/",
          {
           "Ref": "EcsClusterDefaultAutoScalingGroupASGC1A785DB"
          }
         ]
        ]
       }
      },
      {
       "Action": [
        "ecs:DescribeContainerInstances",
        "ecs:DescribeTasks"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "EcsCluster97242B84",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "ecs:ListContainerInstances",
        "ecs:SubmitContainerStateChange",
        "ecs:SubmitTaskStateChange"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "EcsCluster97242B84",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ecs:UpdateContainerInstancesState",
        "ecs:ListTasks"
       ],
       "Condition": {
        "ArnEquals": {
         "ecs:cluster": {
          "Fn::GetAtt": [
           "EcsCluster97242B84",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA45BF396",
    "Roles": [
     {
      "Ref": "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionE17A5F5E": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "ZipFile": "import boto3, json, os, time\n\necs = boto3.client('ecs')\nautoscaling = boto3.client('autoscaling')\n\n\ndef lambda_handler(event, context):\n  print(json.dumps(dict(event, ResponseURL='...')))\n  cluster = os.environ['CLUSTER']\n  snsTopicArn = event['Records'][0]['Sns']['TopicArn']\n  lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])\n  instance_id = lifecycle_event.get('EC2InstanceId')\n  if not instance_id:\n    print('Got event without EC2InstanceId: %s', json.dumps(dict(event, ResponseURL='...')))\n    return\n\n  instance_arn = container_instance_arn(cluster, instance_id)\n  print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))\n\n  if not instance_arn:\n    return\n\n  task_arns = container_instance_task_arns(cluster, instance_arn)\n\n  if task_arns:\n    print('Instance ARN %s has task ARNs %s' % (instance_arn, ', '.join(task_arns)))\n\n  while has_tasks(cluster, instance_arn, task_arns):\n    time.sleep(10)\n\n  try:\n    print('Terminating instance %s' % instance_id)\n    autoscaling.complete_lifecycle_action(\n        LifecycleActionResult='CONTINUE',\n        **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))\n  except Exception as e:\n    # Lifecycle action may have already completed.\n    print(str(e))\n\n\ndef container_instance_arn(cluster, instance_id):\n  \"\"\"Turn an instance ID into a container instance ARN.\"\"\"\n  arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']\n  if not arns:\n    return None\n  return arns[0]\n\ndef container_instance_task_arns(cluster, instance_arn):\n  \"\"\"Fetch tasks for a container instance ARN.\"\"\"\n  arns = ecs.list_tasks(cluster=cluster, containerInstance=instance_arn)['taskArns']\n  return arns\n\ndef has_tasks(cluster, instance_arn, task_arns):\n  \"\"\"Return True if the instance is running tasks for the given cluster.\"\"\"\n  instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']\n  if not instances:\n    return False\n  instance = instances[0]\n\n  if instance['status'] == 'ACTIVE':\n    # Start draining, then try again later\n    set_container_instance_to_draining(cluster, instance_arn)\n    return True\n\n  task_count = None\n\n  if task_arns:\n    # Fetch details for tasks running on the container instance\n    tasks = ecs.describe_tasks(cluster=cluster, tasks=task_arns)['tasks']\n    if tasks:\n      # Consider any non-stopped tasks as running\n      task_count = sum(task['lastStatus'] != 'STOPPED' for task in tasks) + instance['pendingTasksCount']\n\n  if not task_count:\n    # Fallback to instance task counts if detailed task information is unavailable\n    task_count = instance['runningTasksCount'] + instance['pendingTasksCount']\n\n  print('Instance %s has %s tasks' % (instance_arn, task_count))\n\n  return task_count > 0\n\ndef set_container_instance_to_draining(cluster, instance_arn):\n  ecs.update_container_instances_state(\n      cluster=cluster,\n      containerInstances=[instance_arn], status='DRAINING')\n\n\ndef pick(dct, *keys):\n  \"\"\"Pick a subset of a dict.\"\"\"\n  return {k: v for k, v in dct.items() if k in keys}\n"
    },
    "Role": {
     "Fn::GetAtt": [
      "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA",
      "Arn"
     ]
    },
    "Environment": {
     "Variables": {
      "CLUSTER": {
       "Ref": "EcsCluster97242B84"
      }
     }
    },
    "Handler": "index.lambda_handler",
    "Runtime": "python3.9",
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup"
     }
    ],
    "Timeout": 310
   },
   "DependsOn": [
    "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicyA45BF396",
    "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole94543EDA"
   ],
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionAllowInvokefargateefssampleEcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF3F15F4CDBCAB4B5": {
   "Type": "AWS::Lambda::Permission",
   "Properties": {
    "Action": "lambda:InvokeFunction",
    "FunctionName": {
     "Fn::GetAtt": [
      "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionE17A5F5E",
      "Arn"
     ]
    },
    "Principal": "sns.amazonaws.com",
    "SourceArn": {
     "Ref": "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/AllowInvoke:fargateefssampleEcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicF3F15F4C"
   }
  },
  "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionTopic8F34E394": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Protocol": "lambda",
    "TopicArn": {
     "Ref": "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4"
    },
    "Endpoint": {
     "Fn::GetAtt": [
      "EcsClusterDefaultAutoScalingGroupDrainECSHookFunctionE17A5F5E",
      "Arn"
     ]
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/DrainECSHook/Function/Topic/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Topic/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "autoscaling.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy75002F88": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Effect": "Allow",
       "Resource": {
        "Ref": "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy75002F88",
    "Roles": [
     {
      "Ref": "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy/Resource"
   }
  },
  "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookFFA63029": {
   "Type": "AWS::AutoScaling::LifecycleHook",
   "Properties": {
    "AutoScalingGroupName": {
     "Ref": "EcsClusterDefaultAutoScalingGroupASGC1A785DB"
    },
    "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
    "DefaultResult": "CONTINUE",
    "HeartbeatTimeout": 300,
    "NotificationTargetARN": {
     "Ref": "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicACD2D4A4"
    },
    "RoleARN": {
     "Fn::GetAtt": [
      "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B",
      "Arn"
     ]
    }
   },
   "DependsOn": [
    "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy75002F88",
    "EcsClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleA38EC83B"
   ],
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/EcsCluster/DefaultAutoScalingGroup/LifecycleHookDrainHook/Resource"
   }
  },
  "Filesystem653F8FD3": {
   "Type": "AWS::EFS::FileSystem",
   "Properties": {
    "Encrypted": true,
    "FileSystemTags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Filesystem"
     }
    ],
    "LifecyclePolicies": [
     {
      "TransitionToIA": "AFTER_14_DAYS"
     },
     {
      "TransitionToPrimaryStorageClass": "AFTER_1_ACCESS"
     }
    ],
    "PerformanceMode": "generalPurpose"
   },
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Filesystem/Resource"
   }
  },
  "FilesystemEfsSecurityGroup6D2E3511": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "fargate-efs-sample/Filesystem/EfsSecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "Tags": [
     {
      "Key": "Name",
      "Value": "fargate-efs-sample/Filesystem"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Filesystem/EfsSecurityGroup/Resource"
   }
  },
  "FilesystemEfsSecurityGroupfromfargateefssampleServiceSecurityGroupA56E91D62049B5B48B2D": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "IpProtocol": "tcp",
    "Description": "from fargateefssampleServiceSecurityGroupA56E91D6:2049",
    "FromPort": 2049,
    "GroupId": {
     "Fn::GetAtt": [
      "FilesystemEfsSecurityGroup6D2E3511",
      "GroupId"
     ]
    },
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "ServiceSecurityGroupC96ED6A7",
      "GroupId"
     ]
    },
    "ToPort": 2049
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Filesystem/EfsSecurityGroup/from fargateefssampleServiceSecurityGroupA56E91D6:2049"
   }
  },
  "FilesystemEfsMountTarget1FA5225C0": {
   "Type": "AWS::EFS::MountTarget",
   "Properties": {
    "FileSystemId": {
     "Ref": "Filesystem653F8FD3"
    },
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "FilesystemEfsSecurityGroup6D2E3511",
       "GroupId"
      ]
     }
    ],
    "SubnetId": {
     "Ref": "VpcPrivateSubnet1Subnet536B997A"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Filesystem/EfsMountTarget1"
   }
  },
  "FilesystemEfsMountTarget29F807637": {
   "Type": "AWS::EFS::MountTarget",
   "Properties": {
    "FileSystemId": {
     "Ref": "Filesystem653F8FD3"
    },
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "FilesystemEfsSecurityGroup6D2E3511",
       "GroupId"
      ]
     }
    ],
    "SubnetId": {
     "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Filesystem/EfsMountTarget2"
   }
  },
  "TaskDefTaskRole1EDB4A67": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/TaskDef/TaskRole/Resource"
   }
  },
  "TaskDefTaskRoleDefaultPolicyA592CB18": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "elasticfilesystem:ClientMount",
        "elasticfilesystem:ClientWrite",
        "elasticfilesystem:ClientRootAccess"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "Filesystem653F8FD3",
         "Arn"
        ]
       }
      },
      {
       "Action": [
        "ssmmessages:CreateControlChannel",
        "ssmmessages:CreateDataChannel",
        "ssmmessages:OpenControlChannel",
        "ssmmessages:OpenDataChannel"
       ],
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": "logs:DescribeLogGroups",
       "Effect": "Allow",
       "Resource": "*"
      },
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:DescribeLogStreams",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "TaskDefTaskRoleDefaultPolicyA592CB18",
    "Roles": [
     {
      "Ref": "TaskDefTaskRole1EDB4A67"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/TaskDef/TaskRole/DefaultPolicy/Resource"
   }
  },
  "TaskDef54694570": {
   "Type": "AWS::ECS::TaskDefinition",
   "Properties": {
    "ContainerDefinitions": [
     {
      "Essential": true,
      "Image": "public.ecr.aws/nginx/nginx",
      "LogConfiguration": {
       "LogDriver": "awslogs",
       "Options": {
        "awslogs-group": {
         "Ref": "TaskDefnginxLogGroup43DFD1ED"
        },
        "awslogs-stream-prefix": "nginx",
        "awslogs-region": {
         "Ref": "AWS::Region"
        }
       }
      },
      "Memory": 256,
      "MountPoints": [
       {
        "ContainerPath": "/usr/share/nginx/html",
        "ReadOnly": false,
        "SourceVolume": "web-content"
       }
      ],
      "Name": "nginx",
      "PortMappings": [
       {
        "ContainerPort": 80,
        "Protocol": "tcp"
       }
      ]
     }
    ],
    "Cpu": "256",
    "ExecutionRoleArn": {
     "Fn::GetAtt": [
      "TaskDefExecutionRoleB4775C97",
      "Arn"
     ]
    },
    "Family": "fargateefssampleTaskDef5E6F5CF1",
    "Memory": "512",
    "NetworkMode": "awsvpc",
    "RequiresCompatibilities": [
     "FARGATE"
    ],
    "TaskRoleArn": {
     "Fn::GetAtt": [
      "TaskDefTaskRole1EDB4A67",
      "Arn"
     ]
    },
    "Volumes": [
     {
      "EFSVolumeConfiguration": {
       "FilesystemId": {
        "Ref": "Filesystem653F8FD3"
       },
       "RootDirectory": "/",
       "TransitEncryption": "ENABLED"
      },
      "Name": "web-content"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/TaskDef/Resource"
   }
  },
  "TaskDefnginxLogGroup43DFD1ED": {
   "Type": "AWS::Logs::LogGroup",
   "UpdateReplacePolicy": "Retain",
   "DeletionPolicy": "Retain",
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/TaskDef/nginx/LogGroup/Resource"
   }
  },
  "TaskDefExecutionRoleB4775C97": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "ecs-tasks.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/TaskDef/ExecutionRole/Resource"
   }
  },
  "TaskDefExecutionRoleDefaultPolicy0DBB737A": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "logs:CreateLogStream",
        "logs:PutLogEvents"
       ],
       "Effect": "Allow",
       "Resource": {
        "Fn::GetAtt": [
         "TaskDefnginxLogGroup43DFD1ED",
         "Arn"
        ]
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "TaskDefExecutionRoleDefaultPolicy0DBB737A",
    "Roles": [
     {
      "Ref": "TaskDefExecutionRoleB4775C97"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/TaskDef/ExecutionRole/DefaultPolicy/Resource"
   }
  },
  "ServiceD69D759B": {
   "Type": "AWS::ECS::Service",
   "Properties": {
    "Cluster": {
     "Ref": "EcsCluster97242B84"
    },
    "DeploymentConfiguration": {
     "MaximumPercent": 200,
     "MinimumHealthyPercent": 50
    },
    "DesiredCount": 2,
    "EnableECSManagedTags": false,
    "EnableExecuteCommand": true,
    "HealthCheckGracePeriodSeconds": 60,
    "LaunchType": "FARGATE",
    "LoadBalancers": [
     {
      "ContainerName": "nginx",
      "ContainerPort": 80,
      "TargetGroupArn": {
       "Ref": "LBPublicListenerECSGroupD6A32205"
      }
     }
    ],
    "NetworkConfiguration": {
     "AwsvpcConfiguration": {
      "AssignPublicIp": "DISABLED",
      "SecurityGroups": [
       {
        "Fn::GetAtt": [
         "ServiceSecurityGroupC96ED6A7",
         "GroupId"
        ]
       }
      ],
      "Subnets": [
       {
        "Ref": "VpcPrivateSubnet1Subnet536B997A"
       },
       {
        "Ref": "VpcPrivateSubnet2Subnet3788AAA1"
       }
      ]
     }
    },
    "TaskDefinition": {
     "Ref": "TaskDef54694570"
    }
   },
   "DependsOn": [
    "LBPublicListenerECSGroupD6A32205",
    "LBPublicListener6E1F3D94"
   ],
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Service/Service"
   }
  },
  "ServiceSecurityGroupC96ED6A7": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "fargate-efs-sample/Service/SecurityGroup",
    "SecurityGroupEgress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow all outbound traffic by default",
      "IpProtocol": "-1"
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Service/SecurityGroup/Resource"
   }
  },
  "ServiceSecurityGroupfromfargateefssampleLBSecurityGroup929D745D80FDE95A39": {
   "Type": "AWS::EC2::SecurityGroupIngress",
   "Properties": {
    "IpProtocol": "tcp",
    "Description": "Load balancer to target",
    "FromPort": 80,
    "GroupId": {
     "Fn::GetAtt": [
      "ServiceSecurityGroupC96ED6A7",
      "GroupId"
     ]
    },
    "SourceSecurityGroupId": {
     "Fn::GetAtt": [
      "LBSecurityGroup8A41EA2B",
      "GroupId"
     ]
    },
    "ToPort": 80
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/Service/SecurityGroup/from fargateefssampleLBSecurityGroup929D745D:80"
   }
  },
  "LB8A12904C": {
   "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
   "Properties": {
    "LoadBalancerAttributes": [
     {
      "Key": "deletion_protection.enabled",
      "Value": "false"
     }
    ],
    "Scheme": "internet-facing",
    "SecurityGroups": [
     {
      "Fn::GetAtt": [
       "LBSecurityGroup8A41EA2B",
       "GroupId"
      ]
     }
    ],
    "Subnets": [
     {
      "Ref": "VpcPublicSubnet1Subnet5C2D37C4"
     },
     {
      "Ref": "VpcPublicSubnet2Subnet691E08A3"
     }
    ],
    "Type": "application"
   },
   "DependsOn": [
    "VpcPublicSubnet1DefaultRoute3DA9E72A",
    "VpcPublicSubnet1RouteTableAssociation97140677",
    "VpcPublicSubnet2DefaultRoute97F91067",
    "VpcPublicSubnet2RouteTableAssociationDD5762D8"
   ],
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/LB/Resource"
   }
  },
  "LBSecurityGroup8A41EA2B": {
   "Type": "AWS::EC2::SecurityGroup",
   "Properties": {
    "GroupDescription": "Automatically created Security Group for ELB fargateefssampleLB00672671",
    "SecurityGroupIngress": [
     {
      "CidrIp": "0.0.0.0/0",
      "Description": "Allow from anyone on port 80",
      "FromPort": 80,
      "IpProtocol": "tcp",
      "ToPort": 80
     }
    ],
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/LB/SecurityGroup/Resource"
   }
  },
  "LBSecurityGrouptofargateefssampleServiceSecurityGroupA56E91D680B98072B1": {
   "Type": "AWS::EC2::SecurityGroupEgress",
   "Properties": {
    "GroupId": {
     "Fn::GetAtt": [
      "LBSecurityGroup8A41EA2B",
      "GroupId"
     ]
    },
    "IpProtocol": "tcp",
    "Description": "Load balancer to target",
    "DestinationSecurityGroupId": {
     "Fn::GetAtt": [
      "ServiceSecurityGroupC96ED6A7",
      "GroupId"
     ]
    },
    "FromPort": 80,
    "ToPort": 80
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/LB/SecurityGroup/to fargateefssampleServiceSecurityGroupA56E91D6:80"
   }
  },
  "LBPublicListener6E1F3D94": {
   "Type": "AWS::ElasticLoadBalancingV2::Listener",
   "Properties": {
    "DefaultActions": [
     {
      "TargetGroupArn": {
       "Ref": "LBPublicListenerECSGroupD6A32205"
      },
      "Type": "forward"
     }
    ],
    "LoadBalancerArn": {
     "Ref": "LB8A12904C"
    },
    "Port": 80,
    "Protocol": "HTTP"
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/LB/PublicListener/Resource"
   }
  },
  "LBPublicListenerECSGroupD6A32205": {
   "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
   "Properties": {
    "HealthCheckIntervalSeconds": 60,
    "HealthCheckPath": "/health",
    "HealthCheckTimeoutSeconds": 5,
    "Matcher": {
     "HttpCode": "200,404"
    },
    "Port": 80,
    "Protocol": "HTTP",
    "TargetGroupAttributes": [
     {
      "Key": "stickiness.enabled",
      "Value": "false"
     }
    ],
    "TargetType": "ip",
    "VpcId": {
     "Ref": "Vpc8378EB38"
    }
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/LB/PublicListener/ECSGroup/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/31TXW/bMAz8LXtXtLXAhu0xS5suQLYZcdDXgZbplI0sGfpIERj+76NlO3FWYE86nk4UeZTu5dfP8tMHePMLVR4XmgrZ5gHUUTD1p0V1L9vnRolVZZ6zlchioUnlsTAYeu6KdjYG3EOh8cpfuaX3VhEEsuYi7sHjJuuXXxCeIOAbnEXm6MTwmnhjAjrGk2CoZIyWgWt9qdEEkaOKjsL5ydnYpBr+S2zMwaH37/jHRHcClZftSkfPt/eiCa7BHaDvyh8fsCJDU0//MtYEIINuxo1nc3QnUoNPA+wExGC9Ak3mINslB/kQXIrfQjTqhbNWdIju4uQ76ZYqVGel8Ye1x3RwTnSCoJbtzg5jSmtmeaTJ1yvaGB/AKMycrUhzfRrqogTZrrmK6e45ztDV5D1HnfCGreMBeuWomQQ38d42lN5UAmx2xSfWfFF+ZpPrlPwm+mmjCXu2DwPXYg8s39qZOSPmTBp8IKUtlAVoboGNOfEbXjYN95Zs2/Le97Q3TPYmnuuIbzejZsKz/aGcSw2zsOvEDr2NbhhyBg5qHN/R7xiaOPyYmYTnWqY30gljS5Sv/uPp7ou8+8Z/89UTLRz3TzXK3bD+BeIofBS3AwAA"
   },
   "Metadata": {
    "aws:cdk:path": "fargate-efs-sample/CDKMetadata/Default"
   },
   "Condition": "CDKMetadataAvailable"
  }
 },
 "Parameters": {
  "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter": {
   "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
   "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
  },
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Outputs": {
  "LoadBalancerDNS": {
   "Value": {
    "Fn::GetAtt": [
     "LB8A12904C",
     "DNSName"
    ]
   }
  }
 },
 "Conditions": {
  "CDKMetadataAvailable": {
   "Fn::Or": [
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "af-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-northeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ap-southeast-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "ca-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "cn-northwest-1"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-central-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-north-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-2"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "eu-west-3"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "me-south-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "sa-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-east-2"
       ]
      }
     ]
    },
    {
     "Fn::Or": [
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-1"
       ]
      },
      {
       "Fn::Equals": [
        {
         "Ref": "AWS::Region"
        },
        "us-west-2"
       ]
      }
     ]
    }
   ]
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}