AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Parent stack that deploys an ECS cluster that has a separate capacity
             provider per availability zone, as well as an ECS service that uses a
             capacity provider strategy to evenly distribute tasks to each AZ

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the ECS cluster is launched
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet IDs where the EC2 instances will be launched

Resources:

  # This stack contains cluster wide resources that will be shared
  # by all services that get launched in the stack
  ClusterStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: cluster.yml
      Parameters:
        VpcId: !Ref VpcId

  # Capacity provider for the first availability zone
  AzCapacityProviderStack00:
    Type: AWS::Serverless::Application
    Properties:
      Location: single-az-capacity-provider.yml
      Parameters:
        SubnetId: !Select [0, !Ref SubnetIds]
        ClusterName: !GetAtt ClusterStack.Outputs.ClusterName
        EC2Role: !GetAtt ClusterStack.Outputs.EC2Role
        ContainerHostSecurityGroup: !GetAtt ClusterStack.Outputs.ContainerHostSecurityGroup
        CustomAsgDestroyerFunctionArn: !GetAtt ClusterStack.Outputs.CustomAsgDestroyerFunctionArn
        CustomAsgDestroyerFunctionRole: !GetAtt ClusterStack.Outputs.CustomAsgDestroyerFunctionRole


  # Capacity provider for the second availability zone
  AzCapacityProviderStack01:
    Type: AWS::Serverless::Application
    Properties:
      Location: single-az-capacity-provider.yml
      Parameters:
        SubnetId: !Select [1, !Ref SubnetIds]
        ClusterName: !GetAtt ClusterStack.Outputs.ClusterName
        EC2Role: !GetAtt ClusterStack.Outputs.EC2Role
        ContainerHostSecurityGroup: !GetAtt ClusterStack.Outputs.ContainerHostSecurityGroup
        CustomAsgDestroyerFunctionArn: !GetAtt ClusterStack.Outputs.CustomAsgDestroyerFunctionArn
        CustomAsgDestroyerFunctionRole: !GetAtt ClusterStack.Outputs.CustomAsgDestroyerFunctionRole

  # Capacity provider for the third availability zone
  AzCapacityProviderStack02:
    Type: AWS::Serverless::Application
    Properties:
      Location: single-az-capacity-provider.yml
      Parameters:
        SubnetId: !Select [2, !Ref SubnetIds]
        ClusterName: !GetAtt ClusterStack.Outputs.ClusterName
        EC2Role: !GetAtt ClusterStack.Outputs.EC2Role
        ContainerHostSecurityGroup: !GetAtt ClusterStack.Outputs.ContainerHostSecurityGroup
        CustomAsgDestroyerFunctionArn: !GetAtt ClusterStack.Outputs.CustomAsgDestroyerFunctionArn
        CustomAsgDestroyerFunctionRole: !GetAtt ClusterStack.Outputs.CustomAsgDestroyerFunctionRole

  # Define the strategy for distributing tasks across the capacity providers
  CapacityProviderStrategyStack:
    Type: AWS::Serverless::Application
    Properties:
      Location: capacity-provider-associations.yml
      Parameters:
        ClusterName: !GetAtt ClusterStack.Outputs.ClusterName
        CapacityProvider00: !GetAtt AzCapacityProviderStack00.Outputs.CapacityProvider
        CapacityProvider01: !GetAtt AzCapacityProviderStack01.Outputs.CapacityProvider
        CapacityProvider02: !GetAtt AzCapacityProviderStack02.Outputs.CapacityProvider

  # This service will be launched into the cluster by passing
  # details from the base stack into the service stack
  Service:
    Type: AWS::Serverless::Application
    # Ensure that the service stack get's torn down before the capacity provider stack
    DependsOn:
      - CapacityProviderStrategyStack
    Properties:
      Location: service-capacity-provider.yml
      Parameters:
        VpcId: !Ref VpcId
        SubnetIds: !Join [',', !Ref SubnetIds]
        ClusterName: !GetAtt ClusterStack.Outputs.ClusterName
        ECSTaskExecutionRole: !GetAtt ClusterStack.Outputs.ECSTaskExecutionRole
        CapacityProvider00: !GetAtt AzCapacityProviderStack00.Outputs.CapacityProvider
        CapacityProvider01: !GetAtt AzCapacityProviderStack01.Outputs.CapacityProvider
        CapacityProvider02: !GetAtt AzCapacityProviderStack02.Outputs.CapacityProvider